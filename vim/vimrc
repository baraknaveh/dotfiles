"
" A vimrc file to be source-ed from the ~/.vimrc
"

set nocompatible        " Use Vim defaults (much better!)
set backspace=2         " allow backspacing over everything in insert mode
set ai                  " auto indenting
set history=100         " keep 100 lines of history
set ruler               " show the cursor position
syntax on               " syntax highlighting
set hlsearch            " highlight the last searched term
filetype plugin on      " use the file type plugins
set viminfo='20,\"50    " read/write a .viminfo file, don't store more
                        " than 50 lines of registers
set incsearch           " Enable incremental search

set wildmenu
set wildmode=list:longest
set confirm             " Instead of failing commands that require confirmation
                        " prompt for this confirmation.

" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
\ if ! exists("g:leave_my_cursor_position_alone") |
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\ exe "normal g'\"" |
\ endif |
\ endif

" The following works on vim 7.3 and higher
if exists('+colorcolumn') && (! &diff)
  " this trick was picked up from: http://bit.ly/1gkOYQU
  let &colorcolumn=join(range(80,300),",")
  highlight ColorColumn ctermbg=235 guibg=#2c2d27
endif

set tabstop=8 shiftwidth=2 expandtab

" What the name says
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
autocmd FileType c,cpp,java,php,ruby,python,sh,bashrc,vimrc autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" Turn syntax highlighting off in vimdiff to reduce noise
if &diff
  syntax off
  highlight DiffAdd term=reverse cterm=bold ctermbg=black ctermfg=darkgreen
  highlight DiffDelete term=reverse cterm=bold ctermbg=black ctermfg=darkred
  highlight DiffChange term=reverse cterm=bold ctermbg=black ctermfg=white
  highlight DiffText term=reverse cterm=bold ctermbg=darkblue ctermfg=magenta
else
  " Otherwise, enable spelling goodies
  set spell spelllang=en_us
  let s:own_path = expand('<sfile>:h')
  " Following is a local file to add my words. Cursor on a marked word and 'zg'.
  let &spellfile= s:own_path . '/spell/spell-en.utf-8.add'
  " Styling the speller highlighting
  highlight clear SpellBad
  highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
  highlight clear SpellCap
  "highlight SpellCap term=underline cterm=underline
  highlight clear SpellRare
  "highlight SpellRare term=underline cterm=underline
  highlight clear SpellLocal
  highlight SpellLocal term=underline cterm=underline
endif

